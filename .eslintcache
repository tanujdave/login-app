[{"D:\\wamp\\www\\login-app\\src\\App.tsx":"1","D:\\wamp\\www\\login-app\\src\\containers\\Login\\index.tsx":"2","D:\\wamp\\www\\login-app\\src\\components\\Input\\Input.tsx":"3","D:\\wamp\\www\\login-app\\src\\components\\index.ts":"4","D:\\wamp\\www\\login-app\\src\\containers\\Login\\style.ts":"5","D:\\wamp\\www\\login-app\\src\\components\\Button\\Button.tsx":"6","D:\\wamp\\www\\login-app\\src\\components\\Checkbox\\Checkbox.tsx":"7","D:\\wamp\\www\\login-app\\src\\lib\\theme\\global.tsx":"8","D:\\wamp\\www\\login-app\\src\\lib\\config.ts":"9","D:\\wamp\\www\\login-app\\src\\utils\\api.tsx":"10","D:\\wamp\\www\\login-app\\src\\containers\\Login\\service.ts":"11","D:\\wamp\\www\\login-app\\src\\index.tsx":"12"},{"size":389,"mtime":1610816877048,"results":"13","hashOfConfig":"14"},{"size":3716,"mtime":1610816642153,"results":"15","hashOfConfig":"14"},{"size":2387,"mtime":1610816621949,"results":"16","hashOfConfig":"14"},{"size":165,"mtime":1610816628288,"results":"17","hashOfConfig":"14"},{"size":1257,"mtime":1610816659690,"results":"18","hashOfConfig":"14"},{"size":3226,"mtime":1610816981954,"results":"19","hashOfConfig":"14"},{"size":1427,"mtime":1610816617252,"results":"20","hashOfConfig":"14"},{"size":10543,"mtime":1610733755719,"results":"21","hashOfConfig":"14"},{"size":675,"mtime":1610816826253,"results":"22","hashOfConfig":"14"},{"size":1424,"mtime":1610816829892,"results":"23","hashOfConfig":"14"},{"size":511,"mtime":1610816656854,"results":"24","hashOfConfig":"14"},{"size":197,"mtime":1610816916456,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"167kbw7",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\wamp\\www\\login-app\\src\\App.tsx",[],"D:\\wamp\\www\\login-app\\src\\containers\\Login\\index.tsx",["51"],"import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Input, Button, Checkbox } from \"../../components\";\r\nimport {\r\n  LoginPage,\r\n  Container,\r\n  BoxLogin,\r\n  Title,\r\n  FieldRow,\r\n  ErrorMessage,\r\n  BottomLink,\r\n  Label,\r\n} from \"./style\";\r\nimport { login } from \"./service\";\r\n\r\ntype FormInputs = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nconst Login: React.FC = () => {\r\n  const { register, handleSubmit, errors }: any = useForm<FormInputs>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>(\"\");\r\n\r\n  const handleAuthUser = async (data: any) => {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    try {\r\n      const token = await login(data);\r\n      alert(\"login successfully!\");\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LoginPage>\r\n      <Container>\r\n        <BoxLogin>\r\n          <Title>Sign in</Title>\r\n          <form onSubmit={handleSubmit(handleAuthUser)}>\r\n            {error && <ErrorMessage>{error}</ErrorMessage>}\r\n            {Object.keys(errors).length > 0 && (\r\n              <ErrorMessage\r\n                dangerouslySetInnerHTML={{\r\n                  __html: Object.entries(errors).reduce(\r\n                    (acc: string, cur: any) =>\r\n                      (acc += `<div>${cur[cur.length - 1].message}</div>`),\r\n                    \"\"\r\n                  ),\r\n                }}\r\n              />\r\n            )}\r\n            <FieldRow>\r\n              <Input\r\n                isBlock\r\n                autoFocus={true}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                tabIndex={0}\r\n                ref={register({\r\n                  required: \"Enter an email\",\r\n                  pattern: {\r\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                    message: \"Enter valid email address\",\r\n                  },\r\n                })}\r\n                error={errors.email && errors.email.message}\r\n                hasError={errors.email}\r\n                labelComponent={Label}\r\n              />\r\n            </FieldRow>\r\n            <FieldRow>\r\n              <Input\r\n                isBlock\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                ref={register({ required: \"Enter a password\" })}\r\n                error={errors.password && errors.password.message}\r\n                hasError={errors.password}\r\n                labelComponent={Label}\r\n              />\r\n            </FieldRow>\r\n            <FieldRow>\r\n              <Checkbox\r\n                label=\"Remember me?\"\r\n                name=\"remember_me\"\r\n                ref={register}\r\n              />\r\n            </FieldRow>\r\n            <FieldRow>\r\n              <Button type=\"submit\" isLoading={loading}>\r\n                Sign in\r\n              </Button>\r\n              <Button style={{ display: \"none\" }} isLoading={true}></Button>\r\n            </FieldRow>\r\n\r\n            <BottomLink>\r\n              <Button href=\"#\" kind=\"link\">\r\n                Forgot your password?\r\n              </Button>\r\n            </BottomLink>\r\n            <BottomLink>\r\n              Don't have an account?{\" \"}\r\n              <Button href=\"#\" kind=\"link\">\r\n                Sign up\r\n              </Button>\r\n            </BottomLink>\r\n            <BottomLink>\r\n              <Button href=\"#\" kind=\"link\">\r\n                Resend email confirmation\r\n              </Button>\r\n            </BottomLink>\r\n          </form>\r\n        </BoxLogin>\r\n      </Container>\r\n    </LoginPage>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\wamp\\www\\login-app\\src\\components\\Input\\Input.tsx",[],"D:\\wamp\\www\\login-app\\src\\components\\index.ts",[],"D:\\wamp\\www\\login-app\\src\\containers\\Login\\style.ts",[],"D:\\wamp\\www\\login-app\\src\\components\\Button\\Button.tsx",[],"D:\\wamp\\www\\login-app\\src\\components\\Checkbox\\Checkbox.tsx",[],"D:\\wamp\\www\\login-app\\src\\lib\\theme\\global.tsx",[],"D:\\wamp\\www\\login-app\\src\\lib\\config.ts",["52"],"D:\\wamp\\www\\login-app\\src\\utils\\api.tsx",[],"D:\\wamp\\www\\login-app\\src\\containers\\Login\\service.ts",[],"D:\\wamp\\www\\login-app\\src\\index.tsx",[],{"ruleId":"53","severity":1,"message":"54","line":31,"column":13,"nodeType":"55","messageId":"56","endLine":31,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":32,"column":1,"nodeType":"59","endLine":32,"endColumn":55},"@typescript-eslint/no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]